#!/bin/bash

# === HEADER ===
#name: mygitrun
#Description: Automated github script for git operations. 
#Arguments::-
#1. $1  Options
#2. $2  commit message
#3 $3  branch to push to eg main or master 
#
#Version : 0.1.0
#License: MIT
#Written : Gavin Lyons
#URL : https://github.com/gavinlyonsrepo/gitAutoRun
#Exit codes 0 all went well , 2-11 errors codes
#=================

# === GLOBALS VARS ===
# Save Arguments ::-
ARGUMENTS="$1"
COMMIT_MESSAGE="$2"
BRANCH_NAME="$3"

# Prompt for select menu
PS3="By your command:"

# === FUNCTIONS ===

# Function to handle the program exit and exit codes. 
function ExitFunc
{
	case "$1" in
		0) printf "=== DONE === \n" ;;
		2) printf ": Error2 :: Missing arguments \n";;
		3) printf ": Error3 :: Commit message missing\n" ;;
		4) printf ": Error4 :: Branch name missing\n";;
		5) printf ": Error5 ::  git add \n";;
		6) printf ": Error6 ::  git commit.\n";;
		7) printf ": Error7 ::  git push. \n";;
		8) printf  ": Error8 :: Unknown argument \n";;
		9) printf ": Error9 :: Git not installed  \n";;
		10) printf ": Error10 :: user exited Commit message selection \n";;
		11) printf ": Error11 :: Current directory is not a Git Repository \n";;
		*) printf  ": ErrorX :: Unknown Error\n";;
	esac
	
	exit "$1"
}

# Function to handle user input arguments
function CheckInputFunc
{

local VersionVar="0.1.0"
local DateVar=""

# Check if users wants help or version
case "$ARGUMENTS" in
	-v|--version) # print version and exit
		printf "Version :: %s\n" "$VersionVar"
		ExitFunc 0
	;;
	-h|--help) # print help and exit 
		printf "Usage :: mygitrun argument_1 argument_2 argument_2 \n" 
		printf "Argument 1 :: -v -h -a -m -s -c\n"
		printf "Argument 2 :: Optional Commit message - \n"
		printf "Argument 3 :: Optional branch name, eg master or main \n"
		ExitFunc 0
	;;
	-a|--auto) #auto message
		DateVar="$(date  +%d%b%y-%H%M)"
		COMMIT_MESSAGE="Commit at $DateVar"
		BRANCH_NAME=$(AutoBranchNameFunc)
	;;
	-m|--manual) # Users manually enters commit msg and branch name
		#check for commit  , -z Returns true if string string is empty,
		[ -z "$COMMIT_MESSAGE" ] && ExitFunc 3;  
		#check for branch message, -z Returns true if string string is empty,
		[ -z "$BRANCH_NAME" ] && ExitFunc 4; 
	;;
	-c|--commit) # Users manually enters commit msg  only
		#check for commit  , -z Returns true if string string is empty,
		[ -z "$COMMIT_MESSAGE" ] && ExitFunc 3;  
		# Branch name auto message
		BRANCH_NAME=$(AutoBranchNameFunc)
	;;
	-s| --select) # Users select commit msg from menu. 
		CommitMsgSelectFunc
		BRANCH_NAME=$(AutoBranchNameFunc)
	;;
	*) ExitFunc 8;;	# unknown argument option
esac

}

# Function to work with git
function GitWorkFunc
{
	# Git add
	git add . ||   ExitFunc 5; 
	# git commit
	git commit -m "$COMMIT_MESSAGE"  ||  ExitFunc 6; 
	# git push 
	git push -u origin "$BRANCH_NAME" ||   ExitFunc 7; 
	
}

# Function to automatically name branch to current branch
function AutoBranchNameFunc
{
	git status | head -1 | cut -d  ' ' -f3
}

# Function to check if directory is a git repository  
function CheckGitDirFunc
{
	[ -d ".git" ] || ExitFunc 11
}

# Function to check if git is installed 
function CheckGitInstallFunc
{
	command -v git >/dev/null 2>&1 ||  ExitFunc 9;
}

# Function to handle selecting commit message from menu
function CommitMsgSelectFunc
{
	printf "Commit message select menu :\n" 
	local messageVar=""
	local choiceFsVar=""
	local optionsFsArr=("DateTimeStamp" "DateStamp" "Update Documents" "Update Project" "Update Comments" "Update API"  "Exit")
	select choiceFsVar in "${optionsFsArr[@]}"
	do
	case "$choiceFsVar" in
		"${optionsFsArr[0]}") messageVar="$(date  +%d%b%y-%H%M)" ;;
		"${optionsFsArr[1]}") messageVar="$(date  +%d-%b-%y)" ;;
		"${optionsFsArr[2]}") messageVar="Update Documents" ;;
		"${optionsFsArr[3]}") messageVar="Update Project" ;;
		"${optionsFsArr[4]}") messageVar="Update Comments" ;;
		"${optionsFsArr[5]}") messageVar="Update API" ;;
		"${optionsFsArr[6]}") ExitFunc 10 ;;
		*)  ExitFunc 10 ;;
	esac
	break
	done
	COMMIT_MESSAGE="$messageVar"
}
# === MAIN CODE ===

printf "%s\n" "=== START ==="

# check if ZERO arguments. 
[[ "$#" = 0 ]] &&  ExitFunc 2
# check if git installed
CheckGitInstallFunc
# check if git directory 
CheckGitDirFunc
# check the arguments given
CheckInputFunc 
# Git actions
GitWorkFunc
# Exit
ExitFunc 0

# === EOF ===
